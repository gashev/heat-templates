heat_template_version: 2013-05-23

parameters:
  network_id:
    type: string
    label: Network ID
  image_id:
    type: string
    label: Glance Image ID
  flavor:
    type: string
    label: Flavor
  key_name:
    type: string
    label: Key Name
    constraints:
      - custom_constraint: nova.keypair
  count:
    type: number
    default: 3

resources:
  generated_key_pair:
    # http://docs.openstack.org/developer/heat/template_guide/openstack.html#OS::Nova::KeyPair
    type: OS::Nova::KeyPair
    properties:
      name: kubernetes_cloud_user_key
      save_private_key: True

  generated_ansible_key_pair:
    # http://docs.openstack.org/developer/heat/template_guide/openstack.html#OS::Nova::KeyPair
    type: OS::Nova::KeyPair
    properties:
      name: kubernetes_ansible_key
      save_private_key: True

  cloud_user:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: { get_file: user-data }
          params:
            $ssh_key_1: { get_attr: [generated_key_pair, public_key] }
            $ssh_key_2: { get_attr: [generated_ansible_key_pair, public_key] }

  install_ansible:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: { get_file: install_ansible }
          params:
            $ip: { get_attr: [master_port, fixed_ips, 0, ip_address] }

  install_ansible_private_key:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: { get_file: install_ansible_private_key }
          params:
            $key: { get_attr: [generated_ansible_key_pair, private_key] }

  software_config_ansible:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: master
        - name: master_name
        - name: nodes
        - name: node_names
      outputs:
        - name: result
      config: |
        #!/usr/bin/python
        import grp
        import pwd
        import os

        master = os.environ['master']
        master_name = os.environ['master_name']
        nodes = eval(os.environ['nodes'])
        node_names = eval(os.environ['node_names'])

        # Configure /etc/ansible/hosts
        f = open('/etc/ansible/hosts', 'w')
        f.write("[master]\n%s\n\n" % (master))
        f.write("[nodes]\n")
        for node in nodes:
            f.write("%s\n" % (node))
        f.close()
        uid = pwd.getpwnam('cloud').pw_uid
        gid = grp.getgrnam('cloud').gr_gid
        os.chown('/etc/ansible/hosts', uid, gid)

        # Configure /etc/hosts
        f = open('/etc/hosts', 'w')
        f.write("127.0.0.1 localhost\n\n")
        f.write("%s %s\n" % (master, master_name)) 
        for key,value in enumerate(nodes):
            f.write("%s %s\n" % (nodes[key], node_names[key]))
        f.close() 

        # Decode /opt/ansible.tar.gz from base64 and extract files.
        os.system('base64 -d /opt/ansible.tar.gz >/opt/ansible-tmp.tar.gz')
        os.remove('/opt/ansible.tar.gz')
        os.system('tar xvvf /opt/ansible-tmp.tar.gz -C /opt')
        os.remove('/opt/ansible-tmp.tar.gz')

  software_deployment_ansible:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: software_config_ansible
      server:
        get_resource: master
      input_values:
        master: { get_attr: [master_port, fixed_ips, 0, ip_address] }
        master_name: { get_attr: [master, name] }
        nodes: { get_attr: [resource_group, ip_list] }
        node_names: { get_attr: [resource_group, name_list] }

  master_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: {get_resource: cloud_user }
        - config: {get_resource: install_ansible }
        - config: {get_resource: install_ansible_private_key }

  master_port:
    type: OS::Neutron::Port
    properties:
      admin_state_up: true
      network_id: { get_param: network_id }

  master:
    type: OS::Nova::Server
    properties:
      image: { get_param: image_id }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: master_port }
      config_drive: True
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource: master_init }
      personality:
        /opt/ansible.tar.gz: { get_file: "ansible.tar.gz" }

  resource_group:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: count }
      resource_def:
        type: resource_group.yaml
        properties:
          network_id: { get_param: network_id }
          image_id: { get_param: image_id }
          flavor: { get_param: flavor }
          key_name: { get_param: key_name }
          key: { get_attr: [generated_key_pair, public_key] }
          ansible_key: { get_attr: [generated_ansible_key_pair, public_key] }
          master_ip: { get_attr: [master_port, fixed_ips, 0, ip_address] }

outputs:
  private_key:
    description: Private key
    value: { get_attr: [ generated_key_pair, private_key ] }
  ansible_private_key:
    description: Ansible private key
    value: { get_attr: [ generated_ansible_key_pair, private_key ] }

